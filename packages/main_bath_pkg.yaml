# Main Bath Package


# input_boolean.bathroom_occupied 


# Lights:

# door close with motion after turns on input_boolean.bathroom_occupied

# door close to open turns off input_boolean.bathroom_occupied


# door close to open turns on lights

# motion turns on lights


# no motion for 2 minutes with input_boolean.bathroom_occupied off turns off lights

# watch_tv turns off lights when door is open and no motion 



# Fan:

# humidity level +20 over house avg turns on fan

# humidity level Â±5 to house avg turns off fan 


# input_boolean.bathroom_occupied to off sets 15 min timer to turn off fan if humidity level is low

homeassistant:
  customize:
    binary_sensor.main_bath_occupied:
      icon: mdi:toilet
      device_class: occupancy
    binary_sensor.shelly1_e8db84d27f6a_input:
      icon: mdi:light-switch
    sensor.main_bath_occupied:
      icon: mdi:toilet
    sensor.shelly1_e8db84d27f6a_humidity:
      friendly_name: Main Bath Humid
    sensor.shelly1_e8db84d27f6a_temperature:
      friendly_name: Main Bath Temp
    switch.shelly1_e8db84d27f6a:
      friendly_name: Main Bath Fan
      icon: mdi:fan
    binary_sensor.main_bath_door_contact:
      friendly_name: Main Bath Door
    sensor.main_bath_door_power_outage_count:
      icon: mdi:counter
    light.main_bath_light:
      friendly_name: Main Bath Light
    timer.main_bath_lights:
      friendly_name: Main Bath Lights Timer
    timer.main_bath_fan:
      friendly_name: Main Bath Fan Timer

light:
  - platform: group
    name: Main Bath Lights
    unique_id: Main Bath Lights
    entities:
      - light.main_bath_light

input_boolean:
  main_bath_occupied:
    name: Main Bath Occupied
  main_bath_humid:
    name: Main Bath Humid

timer:
  main_bath_lights:
    duration: "00:10:05"
    icon: mdi:timer-outline
    restore: true
  main_bath_fan:
    duration: "00:20:05"
    icon: mdi:timer-outline
    restore: true

template:
  binary_sensor:
    - name: Main Bath Occupied
      state: "{{ states('input_boolean.main_bath_occupied') }}"

  sensor:
    - name: Main Bath Occupied
      state: >
        {% if is_state('input_boolean.main_bath_occupied', 'on')   %}
            Occupied
          {% else %}
            Available
          {% endif %}

    - name: Main Bath Humidity Change
      state: "{{ (states('sensor.shelly1_e8db84d47dbd_humidity') | int ) - (states('sensor.avg_indoor_humidity') | int)}}"
      device_class: "humidity"
      unit_of_measurement: '%'          


automation:


  ## ---- Handle Timer ----------------------------------------------------------------------------------------------##

  - alias: 'Main Bath Lights Timer Start'
    trigger:
      platform: state
      entity_id: light.main_bath_light
      to: 'on'
    action:
      - service: timer.start
        entity_id: timer.main_bath_lights

  - alias: 'Main Bath Lights Timer Cancel'
    trigger:
      platform: state
      entity_id: light.main_bath_light
      to: 'off'
    action:
      - service: timer.cancel
        entity_id: timer.main_bath_lights

  - alias: Main Bath Timer Restart on Motion
    ## motion restarts main bath lights timer

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_motion_occupancy
      from: 'off'
      to: 'on'
    action:
      - service: timer.start
        entity_id: timer.main_bath_lights


  ## ---- Maintain occupied status -----------------------------------------------------------------------------------##

  - alias: Main Bath occupied off
    ## Door open turns off input_boolean.main_bath_occupied

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_door_contact
      from: 'off'   # off is door closed
      to: 'on'      # on is door open

    action:
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.main_bath_occupied

  - alias: Main Bath occupied on
    ## door close with motion after turns on input_boolean.main_bath_occupied

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_door_contact
      from: 'on'   # on is door open
      to: 'off'    # off is door closed
      for:
        hours: 00
        minutes: 00
        seconds: 15

    condition:
      - condition: state
        entity_id: binary_sensor.main_bath_motion_occupancy
        state: 'on'

    action:
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.main_bath_occupied

  - alias: Main Bath motion door closed
    ## motion with door closed turns on input_boolean.main_bath_occupied

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_motion_occupancy
      from: 'off'
      to: 'on'

    condition:
      - condition: state
        entity_id: binary_sensor.main_bath_door_contact
        state: 'off'  ## off is door closed

    action:
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.main_bath_occupied

  ## ---- Turn on the light ------------------------------------------------------------------------------------------##

  - alias: Main Bath occupied turns on light
    ## Door close with motion turns on light.  To catch edge cases
    ## Will make it impossible to leave the bathroom, turn off the light and close the door
    ## and expect the light to stay off

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_door_contact
      from: 'on'   # on is door open
      to: 'off'    # off is door closed

    condition:
      - condition: state
        entity_id: binary_sensor.main_bath_motion_occupancy
        state: 'on'

    action:
      - service: light.turn_on
        data:
          entity_id: light.main_bath_lights


  - alias: Main Bath door turns on light
    ## Door open turns on main_bath_light

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_door_contact
      from: 'off'   # off is door closed
      to: 'on'      # on is door open

    action:
      - service: light.turn_on
        data:
          entity_id: light.main_bath_lights

  - alias: Main Bath motion light on
    ## motion  turns on light

    trigger:
      platform: state
      entity_id: binary_sensor.main_bath_motion_occupancy
      from: 'off'
      to: 'on'

    action:
      - service: light.turn_on
        data:
          entity_id: light.main_bath_lights

  ## ---- Turn off the light? ----------------------------------------------------------------------------------------##

  - alias: "Main Bath light timer turns off lights"
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_bath_lights
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.main_bath_occupied
          state: 'off'
        - condition: state
          entity_id: binary_sensor.main_bath_motion_occupancy
          state: 'off'
        - condition: state
          entity_id: input_boolean.lights_off_automations
          state: "on"
    action:
      - service: light.turn_off
        entity_id: light.main_bath_lights

  - alias: "Main Bath light timer does restart"
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_bath_lights
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: input_boolean.main_bath_occupied
          state: 'on'
        - condition: state
          entity_id: binary_sensor.main_bath_motion_occupancy
          state: 'on'
    action:
      - service: timer.start
        entity_id: timer.main_bath_lights


## ------ Main Bath Fan Automations ----------------------------------------------------------------------------------##

  - alias: 'Main Bath Fan Timer Start'
    trigger:
      platform: state
      entity_id: fan.shelly1_e8db84d47dbd
      to: 'on'
    action:
      - service: timer.start
        entity_id: timer.main_bath_fan

  - alias: 'Main Bath Fan Timer Cancel'
    trigger:
      platform: state
      entity_id: fan.shelly1_e8db84d47dbd
      to: 'off'
    action:
      - service: timer.cancel
        entity_id: timer.main_bath_fan
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.main_bath_humid

  - alias: 'Main Bath High Humidity'
    trigger:
      platform: numeric_state
      entity_id: sensor.main_bath_humidity_change
      above: 20
    action:
      - service: homeassistant.turn_on
        entity_id: fan.shelly1_e8db84d47dbd
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.main_bath_humid

  - alias: "Main Bath Fan Timer Finished"
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_bath_fan
    condition:
        condition: state
        entity_id: fan.shelly1_e8db84d47dbd
        state: 'on'
    action:
      - choose:
          # IF occupied
          - conditions:
              - condition: state
                entity_id: input_boolean.main_bath_occupied
                state: 'on'
            sequence:
              - action: 
                  - service: timer.start
                    entity_id: timer.main_bath_fan
          # ELIF humidity is high by more than 5%
          # - conditions:
          #     - condition: numeric_state
          #       entity_id: input_boolean.main_bath_humid
          #       above: 5
          #   sequence:
          #     - action: 
          #         - service: timer.start
          #           entity_id: timer.main_bath_fan
        # ELSE night
        default:
          - service: homeassistant.turn_on
            entity_id: fan.shelly1_e8db84d47dbd


  - alias: 'Main Bath Fan Handle Occupancy Off'
    trigger:
      - platform: state
        entity_id: input_boolean.main_bath_occupied
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: fan.shelly1_e8db84d47dbd
          state: 'on'
        - condition: state
          entity_id: input_boolean.main_bath_humid
          state: 'off'
    action:
      - service: timer.start
        entity_id: timer.main_bath_fan
      - service: notify.main_floor_cloud
        data:
          message: 'Do NOT go in there!'
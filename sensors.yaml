# - platform: yr
- platform: darksky
  api_key: !secret darksky_api_key
  monitored_conditions:
    - summary
    # - icon
    # - nearest_storm_distance
    # - nearest_storm_bearing
    # - precip_type
    # - precip_intensity
    # - precip_probability
    - temperature
    # - apparent_temperature
    - dew_point
    # - wind_speed
    # - wind_bearing
    # - cloud_cover
    - humidity
    - pressure
    # - visibility
    # - ozone
    # - minutely_summary
    # - hourly_summary
    # - daily_summary
    # - temperature_max
    # - temperature_min
    # - apparent_temperature_max
    # - apparent_temperature_min
    # - precip_intensity_max

- platform: fastdotcom

## Elec Tek Smart Plug sensors

- platform: template
  sensors:
    tv_reset_voltage:
      value_template: '{{ states.switch.tv_reset.attributes["voltage"] | float }}'
      unit_of_measurement: 'V'
      friendly_name: TV Voltage
    tv_reset_weekly_energy_total:
      value_template: '{{ states.switch.tv_reset.attributes["weekly_energy_total"] | float }}'
      unit_of_measurement: 'kWh'
      friendly_name: TV Weekly
    tv_reset_monthly_energy_total:
      value_template: '{{ states.switch.tv_reset.attributes["monthly_energy_total"] | float }}'
      unit_of_measurement: 'kWh'
      friendly_name: TV Monthly
    tv_reset_yearly_energy_total:
      value_template: '{{ states.switch.tv_reset.attributes["yearly_energy_total"] | float }}'
      unit_of_measurement: 'kWh'
      friendly_name: TV Annual

- platform: template
  sensors:
    washer_state:
      value_template: >-
        {% if states.input_boolean.washer_status.state == 'on' %}
          Washing
        {% else %}
          Idle
        {% endif %}


- platform: template
  sensors:
    sun_elevation:
      friendly_name: "Sun Angle"
      value_template: "{{states.sun.sun.attributes.elevation}}"
      unit_of_measurement: '°'

- platform: template
  sensors:
    sun_state:
      friendly_name: "Sun State"
      value_template: >-
        {% if is_state('sun.sun', 'above_horizon') %}
          up
        {% else %}
          down
        {% endif %}

- platform: template
  sensors:
    garage_left_bay:
      friendly_name: "Garage Left Bay"
      value_template: >-
        {% if is_state('binary_sensor.garage_left_bay', 'on') %}
          Occupied
        {% else %}
          Empty
        {% endif %}

- platform: template
  sensors:
    living_room_tv_state:
      friendly_name: "TV State"
      value_template: >-
        {% set tv_power = states('sensor.tv_reset_current_power') | float %}

        {% if tv_power <= 0 %}
           No Power
        {% elif 0 < tv_power < 100 %}
           Standby
        {% elif 100 <= tv_power %}
           On
        {% else %}
           Unknown
        {% endif %}

# Sensor to monitor system resources for the Hass Server
- platform: rest
  name: Hass Server
  resource: http://192.168.254.118:9999/
  timeout: 30
  json_attributes:
    - cpu_current
    - cpu_free
    - cpu_average
    - cpu_temperature
    - drive
    - memory
    - network
  value_template: ''
  headers:
    Content-Type: application/json
    User-Agent: Home Assistant Agent

- platform: template
  sensors:
    hass_server_cputemp:
      value_template: '{{ states.sensor.hass_server.attributes["cpu_temperature"] }}'
      unit_of_measurement: '°'
    hass_server_cpuused:
      value_template: '{{ states.sensor.hass_server.attributes["cpu_current"] }}'
      unit_of_measurement: '%'
    hass_server_freegb:
      value_template: '{{ states.sensor.hass_server.attributes["drive"]["freeGb"] }}'
      unit_of_measurement: 'GB'
    hass_server_driveused:
      value_template: '{{ states.sensor.hass_server.attributes["drive"]["usedPercentage"] }}'
      unit_of_measurement: '%'
    hass_server_freemem:
      value_template: '{{ states.sensor.hass_server.attributes["memory"]["freeMemPercentage"] }}'
      unit_of_measurement: '%'
    hass_server_usedmem:
      value_template: '{{ ( states.sensor.hass_server.attributes["memory"]["usedMemMb"] / states.sensor.hass_server.attributes["memory"]["totalMemMb"]  * 100 ) | round(2) }}'
      unit_of_measurement: '%'
    hass_server_networkin:
      value_template: '{{ states.sensor.hass_server.attributes["network"]["enp2s0"]["inputBytes"] | multiply(0.000000001024) | round(2) }}'
      unit_of_measurement: 'GB'
    hass_server_networkout:
      # Multiply pipe will convert bytes to gb.
      value_template: '{{ states.sensor.hass_server.attributes["network"]["enp2s0"]["outputBytes"] | multiply(0.000000001024) | round(2) }}'
      unit_of_measurement: 'GB'

- platform: template
  sensors:
    outdoor_sea_level_pressure:
      unit_of_measurement: 'mBar'
      value_template: >-
        {{ (float(states.sensor.outdoor_pressure.state) / (1-0.0065*204/(float(states.sensor.outdoor_temperature.state) + 273.15 )) ** (5.255)) | round(1) }}


- platform: template
  sensors:
    outdoor_temperature_c:
      friendly_name: "Outdoor Temperature C"
      unit_of_measurement: 'ºC'
      value_template: "{{ ((( states('sensor.outdoor_temperature') | float ) - 32) * 5/9) | round(1) }}"

- platform: template
  sensors:
    outdoor_dew_point_s:
      friendly_name: "Outdoor Dew Point"
      unit_of_measurement: '°F'
      value_template: >-
        {{ (((243.04*(log(float(states.sensor.outdoor_humidity.state)/100)+((17.625*float(states.sensor.outdoor_temperature_c.state))/(243.04+float(states.sensor.outdoor_temperature_c.state))))
          /(17.625-log(float(states.sensor.outdoor_humidity.state)/100)-((17.625*float(states.sensor.outdoor_temperature_c.state))/(243.04+float(states.sensor.outdoor_temperature_c.state)))))
          *  9/5) + 32) | round(2) }}

- platform: min_max
  entity_ids:
    - sensor.temp_compare_bme280_temperature
    - sensor.temp_compare_sht30d_temperature
  type: mean
  name: avg_tech_cabinet_temp
  round_digits: 2

- platform: min_max
  entity_ids:
    - sensor.garage_sensor_temperature
    - sensor.garage_temp
    - sensor.garage_temp_3_temperature
  type: mean
  name: avg_garage_temp
  round_digits: 2

- platform: min_max
  entity_ids:
    - sensor.garage_humidity
    - sensor.garage_sensor_humidity
    # - sensor.garage_temp_3_humidity
  type: mean
  name: avg_garage_humidity
  round_digits: 2

- platform: min_max
  entity_ids:
    - sensor.family_room_humidity
    - sensor.living_room_humidity
    - sensor.master_bedroom_humidity
    - sensor.plant_stand_humidity
    - sensor.spare_room_humidity
  type: mean
  name: avg_indoor_humidity
  round_digits: 2

- platform: min_max
  entity_ids:
    - sensor.living_room_temperature
    - sensor.master_bedroom_temperature
    - sensor.laundry_temperature
    - sensor.plant_stand_temperature
    - sensor.spare_room_temperature
  type: mean
  name: avg_indoor_temperature
  round_digits: 2

# Pull attributes from Rusty the Roomba
- platform: template
  sensors:
    rusty_status:
      friendly_name: "Rusty Status"
      value_template: "{{ state_attr('vacuum.rusty', 'status')}}"
    rusty_position:
      friendly_name: "Rusty Position"
      value_template: "{{ state_attr('vacuum.rusty', 'position')  }}"
